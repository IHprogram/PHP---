<!-- 繰り返し処理(while) -->
<?php
$i = 1; //変数iに1を代入

//変数iが10になるまでループ
while($i < 11){
  echo $i;
  $i++; //変数iに1をプラス
}
?>

<!-- ここからbreakの使い方 -->
<?php
$x = 1; //変数xに1を代入
//変数xが10になるまでループ
while($x < 11) {
  if ($x == 5) {
    break; //変数xが5の時に処理から抜ける。つまり、1〜4は出力されるが、5は出力されない。
  }
  echo $x;
  $x++;
}
?>

<!-- ここからcontinueの使い方 -->
<?php
// 変数yが10になるまでループ
while ($y < 11) {
  if ($y == 5) {
    $y++; //これがないと、ずっと5になってしまう（1234が出力された状態でターミナルが止まってしまう）ので必ず記入
    continue; //変数yが5の時に処理をスキップし、次の繰り返し処理へ移る。
    // →出力結果は「1234678910」
  }
  echo $y;
  $y++;
}
?>



<!-- 繰り返し処理(for) -->

<?php
for ($i = 1; $i < 11; $i++) {
  echo $i."<br>";
}
?>



<!-- 繰り返し処理(foreach) -->
<?php
$i = [1, 2, 3]; //配列

//$i変数をforeach内でのみ使える$aiに置き換える
foreach ($i as $ai) {
  echo $ai;
  echo "<br>";
}
// 出力結果↓
// 1
// 2
// 3
?>


<?php
// 連想配列
$x = [
  "りんご" => "apple", "ばなな" => "banana", "ぶどう" => "grape", "みかん" => "orage"
];

// 連想配列を順に使う
foreach ($x as $ekkusu) {
  echo $ekkusu."<br>";
}

//配列, ¥連想配列のキーも値として使う
foreach ($x as $key => $ekkusu) {
  echo "キーは「".$key."」<br>";
  echo "値は「".$ekkusu."」<br>";
}
?>